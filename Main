<!DOCTYPE html> 
<html lang="en"> 
<head> <meta charset="utf-8">  
<title> </title> 
<style>  
  *{margin: 0;padding: 0;}   
  .main{width: 900px;margin: auto;}   
  .topic{margin: 20px 0;box-shadow: 0 2px 5px 0 rgba(0,0,0,0.2);border-radius: 6px;}    
  .t1 {padding: 10px;}    
  .topic img{   
       max-width: 100%;  
    }  
  .pbImageToTextHint{display: none;}  
  .t2 li{list-style: none;border: 1px solid #ccc;}  
   .answer-given-body p img{  
            width: auto !important;height: auto!important;max-width: 100% !important;  
    }  
    .hidden {visibility:hidden; }    
  </style>  
</head>  
<body>  
<div class="main">    <h2> Question:<span class="title"></span></h2>    <div class="topic t1">        
<div class="pbImages"><img src="" />        </div>    </div>    <div class="topic t2">Step1/1
<html><head><style data-styled="true" data-styled-version="5.3.5">.gkwtCW{margin:0;font-family:"Aspira Webfont",
  "Helvetica","Arial",sans-serif;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;
  -webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;gap:16px;}/*!sc*/
data-styled.g364[id="sc-z3f5s1-0"]{content:"gkwtCW,"}/*!sc*/
.iIwMoS{white-space:pre-wrap;}/*!sc*/
data-styled.g366[id="sc-1aslxm9-0"]{content:"iIwMoS,"}/*!sc*/
.fzJtOB{text-align:start;}/*!sc*/
data-styled.g368[id="sc-1aslxm9-2"]{content:"fzJtOB,"}/*!sc*/
.hOZehF{margin:0;font-family:"Aspira Webfont","Helvetica","Arial",sans-serif;}/*!sc*/
data-styled.g395[id="sc-9wsboo-0"]{content:"hOZehF,"}/*!sc*/
.lhIoTe{margin:0;font-size:1rem;}/*!sc*/
data-styled.g397[id="sc-1swtczx-0"]{content:"lhIoTe,"}/*!sc*/
.iHelzO{margin:0;font-family:"Aspira Webfont","Helvetica","Arial",sans-serif;line-height:normal;}/*!sc*/
data-styled.g428[id="sc-1sugbjn-0"]{content:"iHelzO,"}/*!sc*/
.kkKaFK{margin-top:14px;}/*!sc*/
data-styled.g432[id="sc-1sugbjn-4"]{content:"kkKaFK,"}/*!sc*/
.iQllJf{margin-top:14px;}/*!sc*/
data-styled.g433[id="sc-1sugbjn-5"]{content:"iQllJf,"}/*!sc*/
</style></head><body><div class="sc-1sugbjn-1 fnYWeX"><div class="sc-1sugbjn-2 fJzpFM">
<h3 id="step-1-of-1" class="sc-1sugbjn-3 gSoZud"></h3><div><div class="sc-z3f5s1-0 gkwtCW" data-test="blocks">
<div class="sc-z3f5s1-1 dCjZEh"><div class="sc-1swtczx-0 lhIoTe" data-test="block-0"><div class="sc-9wsboo-0 hOZehF">
<div class="sc-1aslxm9-0 iIwMoS"><div class="sc-1aslxm9-2 fzJtOB">Step 1:

A collection defined:

Let us just look at how to generate a list with React. To accomplish this, researchers will traverse the column element using the map() code and will surround 
modifications in square brackets. The parts and components are then assigned to listItems. Finally, display this list on the Web by putting it among the ul&gt; 
and /ul&gt; components.


Step 2:

React's components list creation work:

In order to create lists of pieces, students must use the character characteristic "key," as specified in the React documentation. To determine whether items
in a list had already been modified, added, or destroyed, React need so many keys. An individual identifier is required for each object. The id about an entity 
usually works nicely for all of that.

Collection but instead attributes presume:

Whenever making lists of components in Javascript, users must use a special word attribute called "key". React uses keys to indicate whether additional burdens have 
been modified, removed, or altered. Or, to put it another way, designers may say that keywords are applied to identify the components in collections.
</div><div class="sc-1aslxm9-2 fzJtOB"><br class="sc-1aslxm9-1 ggZWeK"></div></div></div></div></div></div></div></div></div></body></html>

Explanation:
<html><head></head><body><div class="sc-h99um8-0 dWTBDO sc-1sugbjn-6 inmZBg" id="explanation-step-1-of-1"><div><div class="sc-1swtczx-0 lhIoTe">
  <div class="sc-9wsboo-0 hOZehF"><div class="sc-1aslxm9-0 iIwMoS"><div class="sc-1aslxm9-2 fzJtOB">Keyboards are a component that makes it easier to recognize 
    where things changed, been added, or been taken away. The array's members should really be given keys so they can maintain their uniqueness while being printed.
    Task aspects are a means to create elements in Redux that don't possess their own storage and only use a serve procedure. They are merely Scripting processes 
    that might or might not include credentials that contain data. Humans would write a process that accepts the props(properties) argument and outputs the displayed 
    result.

</div></div></div></div></div></div></body></html></div></div></html>
